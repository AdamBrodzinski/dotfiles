#--------------------------------------------------------------------------
#                          Vanilla... ice ice baby
#--------------------------------------------------------------------------

snippet log "log package" w
console.log("$1"${2:, $3});$0
endsnippet

snippet bug "console debug" w
console.debug('$1');$0
endsnippet

snippet warn "console warning" w
console.warn($1);$0
endsnippet

snippet time "console.time" w
console.time('$1');$0
endsnippet

snippet tend "console.timeEnd" w
console.timeEnd('$1');$0
endsnippet

snippet if "if"
if ($1) {
  $0
}
endsnippet


snippet if! "if single line"
if (!$1) return;
$0
endsnippet


snippet ife "if ___ else"
if ($1) {
  $2
} else {
  $0
} 
endsnippet

snippet if? "If foo is defined" b
if (typeof $1 !== "undefined" && $1 !== null) {
  $0
}
endsnippet

snippet for "For Loop"
for (var ${2:i}=0, n=${1:basket}.length; $2 < n; $2++) {
  var ${3:fruit} = $1[$2];
  $0
}
endsnippet

snippet tern "Ternery Operator" b
($1) ? $2 : $3;$0
endsnippet

snippet anon "Anonymous Function" w
function($1) {
  $0
}
endsnippet

snippet fun "Function" w
function $1($2) {
  $0
}
endsnippet

snippet foreach "forEach method"
$1.forEach(function($2) {
  $0
});
endsnippet

snippet def "Object Method" !b
${1:myMethod}($3) {
	$0
}${4:,
}
endsnippet

# last method in obj
snippet }def "Object Method" !b
},

${1:myMethod}: function($3) {
	$0
}
endsnippet

snippet pdef "Prototype Method"
${1:Moo}.prototype.${2:method} = function($3) {
  $0
}
endsnippet

snippet :: "Prototype" w
.prototype.
endsnippet

snippet class "Description"
function ${1:Name}($2) {
  $0
}
endsnippet

snippet super "Call Super Method"
${1:Foo}.call(this, ${2:args});$0
endsnippet

snippet doc "Method Documentation" b
// ${1:Public:} ${2:Description here}${3:
// 
// Examples:
//
// ${4:Foo}}
//
// ${5:param} - The {${6:type}} ${7: params description}
//
// Returns
//
endsnippet

# DOM

snippet d.id "getElementById"
document.getElementById('$1');$0
endsnippet

snippet d.create "Create Element"
document.createElement('$1');$0
endsnippet

snippet d.after "insert after end" w
insertAdjacentElement('afterend', $1);$0
endsnippet


snippet inherit "Inherit a Class" b
function ${1:ClassName}($2) {
  ${3:SuperClass}.call(this, ${4:params}); // call super
  $0
};
 
// inherit from another class
$1.prototype = Object.create($3.prototype);
$1.prototype.constructor = $1;
endsnippet

snippet switch "Swith statement" b
switch($1) {
  case $2 : $3
    $0
  break
}

endsnippet


#--------------------------------------------------------------------------
#           Typo derived aliases (faster than backspacing)
#--------------------------------------------------------------------------

snippet puts "puts console log" w
console.log($1);
endsnippet

snippet @ "This symbol"
this.
endsnippet


#--------------------------------------------------------------------------
#                              Modules
#--------------------------------------------------------------------------

snippet req "CommonJS Require" w
var ${1:foo} = require('${2:$1}');$0
endsnippet

snippet define "Define an AMD Module" w
define(['${1:depends}'],
function(${2:namespaces}) {
  
  $0

  return {

  };
});

endsnippet

snippet module "Module Pattern" b
${1:moduleName} = (function(){
  
  $0

  return { upload: upload };
})();
endsnippet


#--------------------------------------------------------------------------
#                                jQuery
#--------------------------------------------------------------------------
snippet j "jquery object"
$($1)$0;
endsnippet  

snippet ready "document ready" w
$(document).ready(function() {
    $0
});
endsnippet


snippet prev "Prevent Default Event" b
e.preventDefault();
$0
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10});
endsnippet

#--- TDD BDD -----

snippet desc "Describe Block"
describe("$1", function($2) {
  $0
});
endsnippet

snippet it "It block"
it("should $1", function(${2:done, sr, cl}) {
  $0    
});
endsnippet

snippet ex "Expect"
expect($1).$0;
endsnippet

snippet exte "expect().toEqual"
expect($1).toEqual($2);$0
endsnippet


# Meteor
snippet M "Metor"
Meteor.$0
endsnippet

snippet coll "New Collection" !b
$1 = new Meteor.Collection('$2');$0
endsnippet

snippet subs "Subscribe to Collection" !b
Meteor.subscribe('$1');$0
endsnippet

snippet publ "Publish a Collection" !b
Meteor.publish('$1', function($2) {
  return ${3:Thing}.find({ $4 }${5:, { $6 }});
});
$0
endsnippet

snippet latency "Simulate Latency in Dev" !b
if (! this.isSimulation) {
  var Future = Npm.require('fibers/future');
  var future = new Future();
  Meteor.setTimeout(function() {
      future.return();
      }, 3 * 1000);
  future.wait();
}
endsnippet

snippet autorun "Meteor Autorun Callback"
Deps.autorun(function() {
  $0
});

endsnippet

snippet events "Meteor Template Events" !b
Template.${1:tmplName}.events({
  '${2:click .foo}': function(e) {
    e.preventDefault();
    $0
  }
});
endsnippet

snippet form "Meteor Form Event" b
'submit form': function(e) {
  var form, data;
  e.preventDefault();
  form = $(e.target);

  data = {
    ${1:${2:foo}: form.inputVal('$3'),
    $4}
  };
}
endsnippet

snippet help "Template Helper" !b
Template.${1:tmplName}.helpers({
  ${2:name}: function($3) {
    return $0;
  }
});
endsnippet

snippet rendered "Template Rendered" b
Template.${1:tmplName}.rendered = function($2) {
  $0
};

endsnippet

snippet destroyed "Template Destroyed" b
Template.${1:tmplName}.destroyed = function($2) {
  $0
};

endsnippet

snippet methods "Meteor Methods" b
Meteor.methods({
  ${1:foo}: function($2) {
    $0
  }
});   
endsnippet

snippet call "Call Meteor Method" !b
Meteor.call('${1:methodName}'${2:, ${3:params}});$0
endsnippet

snippet error "Throw Meteor Error" !b
if (${1:!user}) throw new Meteor.error(${2:401}, "${3:You need to login to upvote}");$0
endsnippet

snippet tre "trackError call"
trackError(err);
endsnippet

snippet sset "Set session var"
Session.set('$1', $2);$0
endsnippet

snippet sget "Get session var"
Session.get('$1');$0
endsnippet

snippet go "Iron Router #go" b
Router.go('$1');$0
endsnippet

snippet check "Check inputs" b
check($1, $2);$0
endsnippet

# ------------------- Mixpanel --------------------

snippet track "Track event" b
track("$1", {$2});$0
endsnippet

snippet parseform "Parse-Form package" b
var form = new ParseForm('$1');$0
endsnippet

snippet try "Try Catch" b
try {
  $1
}
catch (e) {
  return trackError(e);
}
endsnippet
