#--------------------------------------------------------------------------
#                          Vanilla... ice ice baby
#--------------------------------------------------------------------------

snippet ar "dunder ar"
if (!Array.prototype.__$1) {
	Array.prototype.__$1 = function($2) {
		return _.$1(this, $2);
	};
}

$0
endsnippet


snippet log "log package" w
log("$1"${2:, $3});$0
endsnippet

snippet bug "console debug" w
log.debug('$1');$0
endsnippet

snippet warn "console warning" w
console.warn($1);$0
endsnippet

snippet time "console.time" w
console.time('$1');$0
endsnippet

snippet tend "console.timeEnd" w
console.timeEnd('$1');$0
endsnippet

snippet if "if"
if ($1) {
  $0
}
endsnippet


snippet if! "if single line"
if (!$1) return;
$0
endsnippet


snippet ife "if ___ else"
if ($1) {
  $2
} else {
  $0
} 
endsnippet

snippet if? "If foo is defined" b
if (typeof $1 !== "undefined" && $1 !== null) {
  $0
}
endsnippet

snippet for "For Loop"
for (var ${2:i}=0, n=${1:basket}.length; $2 < n; $2++) {
  var ${3:fruit} = $1[$2];
  $0
}
endsnippet

snippet tern "Ternery Operator" b
($1) ? $2 : $3;$0
endsnippet

snippet anon "Anonymous Function" w
function($1) {
  $0
}
endsnippet

snippet fun "Function" w
function $1($2) {
  $0
}
endsnippet

snippet foreach "forEach method"
$1.forEach(function($2) {
  $0
});
endsnippet

snippet def "Object Method" !b
${1:myMethod}($3) {
	$0
}${4:,}
endsnippet

# last method in obj
snippet }def "Object Method" !b
},

${1:myMethod}: function($3) {
	$0
}
endsnippet

snippet pdef "Prototype Method"
${1:Moo}.prototype.${2:method} = function($3) {
  $0
}
endsnippet

snippet :: "Prototype" w
.prototype.
endsnippet

snippet class "ES6 Class"
class $1 ${2:extends ${3:React.Component}} {
	constructor() {
	}
}
endsnippet

snippet cons "Class Constructor"
constructor(props) {
  super(props);
	this.state = {};
}
endsnippet

snippet super "Call Super Method"
${1:Foo}.call(this, ${2:args});$0
endsnippet

snippet doc "JS Doc Bock" b
/**
 * ${1:Description here}
 *
 * @param ${2:{TYPE}} - ${3: params description}
 */
endsnippet

# DOM

snippet d.id "getElementById"
document.getElementById('$1');$0
endsnippet

snippet d.create "Create Element"
document.createElement('$1');$0
endsnippet

snippet d.after "insert after end" w
insertAdjacentElement('afterend', $1);$0
endsnippet


snippet inherit "Inherit a Class" b
function ${1:ClassName}($2) {
  ${3:SuperClass}.call(this, ${4:params}); // call super
  $0
};
 
// inherit from another class
$1.prototype = Object.create($3.prototype);
$1.prototype.constructor = $1;
endsnippet

snippet switch "Swith statement" b
switch($1) {
  case $2 : $3
    $0
  break
}

endsnippet

# ---- JS Hint ----
snippet glob "Global declaration" b
/* global $1 */$0
endsnippet

#--------------------------------------------------------------------------
#           Typo derived aliases (faster than backspacing)
#--------------------------------------------------------------------------

snippet puts "puts console log" w
console.log($1);
endsnippet

snippet @ "This symbol"
this.
endsnippet


#--------------------------------------------------------------------------
#                              Modules
#--------------------------------------------------------------------------

snippet req "CommonJS Require" w
var ${1:foo} = require('${2:./}$1');$0
endsnippet

snippet imp "ES6 Require" w
import ${1:FOO} from '${2:.$3/}$1';$0
endsnippet

snippet impage "import page" b
import ${1:Foo} from 'pages/$1';
endsnippet

snippet imcomp "import component" b
import ${1:Foo} from 'components/$1';
endsnippet

snippet immodel "import model" b
import ${1:Foo} from 'model/$1';
endsnippet

snippet define "Define an AMD Module" w
define(['${1:depends}'],
function(${2:namespaces}) {
  
  $0

  return {

  };
});

endsnippet

snippet module "Module Pattern" b
${1:moduleName} = (function(){
  
  $0

  return { upload: upload };
})();
endsnippet


#--------------------------------------------------------------------------
#                                jQuery
#--------------------------------------------------------------------------
snippet j "jquery object"
$($1)$0;
endsnippet  

snippet ready "document ready" w
$(document).ready(function() {
    $0
});
endsnippet


snippet prev "Prevent Default Event" b
e.preventDefault();
$0
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10});
endsnippet

#--- TDD BDD -----

snippet desc "Describe Block"
describe("$1", function($2) {
  $0
});
endsnippet

snippet it "It block"
it("$1", function() {
  $0    
});
endsnippet

snippet bef "Before Each" b
beforeEach(($1) => {
  $2
});

endsnippet

snippet ex "Expect"
expect($1).$0;
endsnippet

snippet tobe "toBe" b
expect($1).toBe($2);$0
endsnippet

snippet exte "expect().toEqual"
expect($1).toEqual($2);$0
endsnippet

snippet beencalled "been called"
expect($1).toHaveBeenCalled();
endsnippet

snippet spy "Spy On" !b
spyOn($1, $2)$0
endsnippet

# Meteor
snippet M "Metor"
Meteor.$0
endsnippet

snippet coll "New Collection" !b
db.$1 = new Meteor.Collection('$1');$0
endsnippet

snippet subs "Subscribe to Collection" !b
Meteor.subscribe('$1');$0
endsnippet

snippet publ "Publish a Collection" !b
Meteor.publish('$1', function($2) {
  return db.${3:collname}.find({ $4 }${5:, { $6 }});
});
$0
endsnippet

snippet latency "Simulate Latency in Dev" !b
Meteor._sleepForMs($1);$0
endsnippet

snippet autorun "Meteor Autorun Callback"
Tracker.autorun(function() {
  $0
});

endsnippet

snippet events "Meteor Template Events" !b
Template.${1:tmplName}.events({
  '${2:click .foo}': function(e) {
    e.preventDefault();
    $0
  }
});
endsnippet

snippet created "onCreated callback"
Template.${1:tmplName}.onCreated(() => {

});

endsnippet

snippet form "Meteor Form Event" b
'submit form': function(e) {
  e.preventDefault();
  var form = new ParseForm(e.target);
	var isValid = ValidateForm.validate(e.target);

	${1:NAME}Controller.${2:create}({
    ${3:key}: form.$3,
		$0
  });
}
endsnippet

snippet helpers "Template Helper" !b
Template.${1:tmplName}.helpers({
  ${2:name}: function($3) {
    return $0;
  }
});
endsnippet

snippet ghelper "Global Template Helper" !b
Blaze.registerHelper('$1', function () {
  return $0;
});
endsnippet

snippet rendered "Template Rendered" b
Template.${1:tmplName}.rendered = function($2) {
  $0
};

endsnippet

snippet destroyed "Template Destroyed" b
Template.${1:tmplName}.destroyed = function($2) {
  $0
};

endsnippet

snippet methods "Meteor Methods" b
Meteor.methods({
  ${1:foo}: function($2) {
    $0
  }
});   
endsnippet

snippet call "Call Meteor Method" !b
Meteor.call('${1:methodName}'${2:, ${3:params}});$0
endsnippet

snippet error "Throw Meteor Error" !b
if (${1:!user}) throw new Meteor.error(${2:401}, "${3:You need to login to upvote}");$0
endsnippet

snippet tre "trackError call"
trackError(err, {showError: true});
endsnippet

snippet sset "Set session var"
Session.set('$1', $2);$0
endsnippet

snippet sget "Get session var"
Session.get('$1');$0
endsnippet

snippet go "Iron Router #go" b
Router.go('$1');$0
endsnippet

snippet check "Check inputs" b
check($1, $2);$0
endsnippet

snippet schema "Schema Check" b
check(data, {
	${1:key1}: $2,$0
});
endsnippet

# ------------------- Mixpanel --------------------

snippet track "Track event" b
track("$1", {$2});$0
endsnippet

snippet parseform "Parse-Form package" b
var form = new ParseForm('$1');$0
endsnippet

snippet try "Try Catch" b
try {
  $1
}
catch (e) {
  return trackError(e);
}
endsnippet

# ---------- ANGULAR ------

snippet sc "$scope"
$scope.
endsnippet

snippet service "Angular Service" b
angular.module('app')

.service('$1', function(){
  $0
})

endsnippet

# ------- React Native --------
snippet view "View"
<View${1: style={styles.${2:}}}>
	$0
</View>
endsnippet

snippet text "Text" b
<Text${1: style={styles.${2:}}}>$0</Text>
endsnippet

snippet style "inline style"
style={styles.${1:someProp}}$0
endsnippet

snippet styles "Style Def" !b
var styles = StyleSheet.create({
  container: {
    flex: 1,
    //flexDirection: 'column',
  }
});
endsnippet

snippet tag "XML Tag"
<$1>$2</$1>
endsnippet

snippet tagc "XML Self Closing"
<${1:TagName} />
endsnippet

snippet tagb "XML Tag Block"
<$1>
  $2
</$1>
endsnippet

snippet comp "Component" !b
<${1:compName}
    style={styles.$2}
		${3:attr}
  />

endsnippet

snippet compb "Component Block" b
<$1>
  $0
</$1>
endsnippet

snippet comps "Self closing Component" !b
<${1:compName} />
endsnippet

snippet render "react render" !b
render() {
  return (
		<View style={styles.container}>
	    $0
		</View>
	);
}
endsnippet


snippet react "React Comp"
import {React, View, connect, dispatch, pushState, Link} from 'view';

const ${1:CompName} = (props) => (
  <View>
	  $0
  </View>
);

const styles = {
  container: {
    flex: 1,
  },
};
export default $1;
endsnippet



snippet reactn "React Comp"
import React from 'react-native';
var Colors = require('../../Styles/Colors');
var Fonts = require('../../Styles/Fonts');
let styles;
const {
  Text,
  View,
  StyleSheet,
} = React;


class $1 extends React.Component {
  render() {
    return (
      <View style={styles.container}>
     		<Text>Hello $1</Text>$0
      </View>
    );
  }
}

styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default $1;
endsnippet


snippet container "React Comp"
import React from 'react-native';
import connectToStores from 'alt/utils/connectToStores';


@connectToStores
class ${1:Foo}Container extends React.Component {
  static getStores() {
    return [${2:Bar}Store];
  }

  static getPropsFromStores() {
    return $2Store.getState();
  }

  render() {
    return (
      <View style={{flex:1}}>
			  <$1 />
      </View>
    );
  }
}

module.exports = $1;
endsnippet


snippet reactm "React Web for Meteor" b
const ${1:Foo} = React.createClass({
  render() {
    return (
      <div className='$1'>
        $0
      </div>
    );
  }
});

Comps.$1 = $1;
endsnippet



snippet exdef "Description" !b

export default $1;$0
endsnippet

snippet div "JSX div" b
<div className="$1">
  $0
</div>
endsnippet

snippet p "paragraph tag JSX"
<p>$1</p>$0
endsnippet

snippet a "JSX link" b
<a href="$1">$2</a>$0
endsnippet

snippet ob "Object" b
$1: {
	$0
},
endsnippet

snippet key "Object Key" b
$1: $0,
endsnippet

snippet reactunit "React Unit Test" !b
/*global $1, renderComponent */

describe("$1 Component", function() {
  var defProps, renderWithProps, component, el, $el;

  beforeEach(() => {
    defProps = {
      label: 'Check me',
    };

    renderWithProps = function(props) {
      component = renderComponent($1, props);
      el = React.findDOMNode(component);
      $el = $(el);
    };
		renderWithProps(defProps);
  });

  it("should be mounted in DOM", () => {
    expect($el.length).toEqual(1);
  });
});
endsnippet

snippet ss "Set React State"
this.setState({$1: $2});$0
endsnippet

snippet didmount "ComponentDidMount" !b
componentDidMount() {
	$0
}
endsnippet

snippet didunmount "ComponentDidUnmount" !b
componentDidUnmount() {
	$0
}
endsnippet

snippet initialstate "getInitialState" !b
getInitialState() {
	return {
		$0
	};
},

endsnippet

snippet cosmicaction "Meteor Actions" b
/*global $1Actions:true */

$1Actions = {
  $0
};
endsnippet

snippet action "Alt Action" b
const $1Actions = alt.generateActions(
  "${2:toggleFoo}",
);

module.exports = $1Actions;

class ${1:Foo}Actions {
  $2() {
    this.dispatch();
  }
}

module.exports = alt.createActions($1Actions);
endsnippet

snippet store "Alt Store" b
import $1Actions from '../Actions/$1Actions';

class ${1:Foo}Store {
  constructor() {
    this.bindActions($1Actions);
  }

  on${2:Bar}() {
  }
}

export default alt.createStore($1Store, '$1Store');
endsnippet

snippet reqaction "Require Action" b
import $1Actions from '${2:../../}Actions/$1Actions';
endsnippet

snippet reqstore "Require Store" b
import $1Store from '${2:../../}Stores/$1Store';
endsnippet

snippet proptypes "PropTypes" b
propTypes: {
  ${1:key}: React.PropTypes.$2,$0
},
endsnippet

snippet sproptypes "PropTypes" b
static propTypes = {
  ${1:key}: React.PropTypes.$2,$0
};
endsnippet

snippet css "CSS Block" b
$1: {
  $2: $3,$0
},
endsnippet

snippet async "Async Wrapper" b
(async () => {
var $1 = await $2;
})()

endsnippet

snippet li "HTML LI" b
<li>$1</li>
endsnippet

snippet getstate "getInitialState" b
getInitialState(){
	return {
		$1
	};
},$0
endsnippet

snippet br "JSX linebreak"
<br />$0
endsnippet

snippet row "JSX Row" b
<Row>
  $0
</Row>
endsnippet

snippet column "JSX Column" b
<Column width='${1:12}'>
  $0
</Column>
endsnippet

snippet generator "yo generator"
var generators = require('yeoman-generator');

module.exports = generators.Base.extend({
  constructor: function constr() {
    generators.Base.apply(this, arguments);

    this.option('coffee');
  },

  hello: function hello() {
    this.log('component test');
  },
});
endsnippet
snippet meth "es3 method"
$1: function $1() {
  $0
},
endsnippet

snippet gfun "global function" !b
${1:foo} = function $1($2) {
  $0
}
endsnippet

snippet raction "Redux action" !b
${1:foo} = function $1(payload) {
	return {
		type: $2,
		payload: $0
	};
}
endsnippet

snippet shouldupdate "React lifecycle" b
shouldComponentUpdate() {
	return true
},
endsnippet

snippet willmount "React lifecycle" b
componentWillMount() {
  $0
},
endsnippet

snippet imp:react "import React" b
import React from 'react';$0
endsnippet

snippet importform "Form widgets" !b
import FormRow from 'components/Form/FormRow';
import Checkbox from 'components/Form/Checkbox';
import Input from 'components/Form/Input';
import {RadioYesNo} from 'components/Form/Radio';
import Select from 'components/Form/Select';$0
endsnippet

snippet connect "Redux Connect"
function mapStateToProps(state) {
  return {${2:compKey}: state.${3:storeKey} };
}
Comps.${1:CompName} = connect(mapStateToProps)($1);
endsnippet

snippet action "Description" !b

/* global PropertyActions:true */
const A = {};

// userDoc: Object logged in user's document
A.viewerChanged = function viewerChanged(userDoc) {
  return {
    type: 'VIEWER_CHANGED',
    payload: userDoc,
  };
};

PropertyActions = A;
endsnippet

snippet stateless "Stateless Comp" b
/* @flow */
import React from 'react';
import { connect } from 'react-redux';
import { Link } from 'react-router';
import View from 'components/View';
let styles;

const ${1:CompName} = (props) => (
  <View>
	  $0
  </View>
);
export default $1;
//export default connect(s => ({foo: s.foo}))($1);

styles = {
  container: {
    height: '100%',
  }
};
endsnippet

snippet reducer "Redux reducer" b
const initialState = {
  bar: 0,
};

export default function ${1:reducerName}(state = initialState, action) {
  switch (action.type) {

  case '${2:FOO}':
    return {...state,
      bar: action.content};

  default:
    return state;
  }
};
endsnippet

snippet fill "Description" !b
fillIn({name: $1}, $2)

endsnippet
