# edit configs
alias ezsh='nvim ~/.zshrc && source ~/.zshrc'
alias eali='nvim ~/.zshalias && source ~/.zshalias'
alias evim='nvim ~/.config/nvim'
alias ealc='nvim ~/.config/alacritty/alacritty.toml'
alias ehyp='nvim ~/.config/hypr/hyprland.conf'
alias ezel='nvim ~/.config/zellij/config.kdl'

# apps
alias vi='nvim'
alias python=python3
alias pip=pip3
alias gg=lazygit
alias wifi=nmtui
alias bluetooth=bluetui
alias bt=bluetui
alias j=just

# unix
alias ls='eza'
alias l='eza -l --no-user --time-style="+%b %d %I:%M %P  "'
alias ll='eza -la --no-user --time-style="+%b %d %I:%M %P  "'
alias ..='cd ..'
alias ...='cd ../..'
alias c='clear'

# development
alias run='make -f MyMakefile'
alias rg='rg --hidden'
alias gs='git status'
alias gb='git branch'
alias co='git checkout'
alias cob='git checkout -b'
alias delete-all-branches='git branch | grep -v "main" | xargs git branch -D'
alias deploy-to-dev='git push origin HEAD:develop --force'
alias count-loc="find . ! -name '*generated*' ! -name '*graphql' ! -name '*json' -type f | xargs wc -l | sort -n"
alias ssh='TERM=xterm-256color ssh'

# system
alias shutdown='shutdown -h now'
alias suspend='systemctl suspend'
alias upgrade_system='sudo pacman -Syu'
alias ins='sudo pacman -S'
alias pbcopy='wl-copy'
alias pbpaste='wl-paste'
alias energy='upower -i $(upower -e | grep BAT)'


# functions
scr () {
  if [[ -f package.json ]]; then # skip if file not found
    # fuzzy find keys in package.json scripts array
    local selected_npm_target=$(jq -r '.scripts | keys[]' package.json | fzf)
    if [[ -n $selected_npm_target ]]; then # if something was selected in fzf
      yarn run $selected_npm_target
    fi
  fi
}

proj () {
  # use find to list all the directories in the code folder, trim abs path, fuzzy find
  local selected_project=$(
    find ~/Code ~/code/mfes ~/code/services -mindepth 1 -maxdepth 1 -type d \
    | sed -E 's|/home/adam/code/||I; s|/Users/adambrodzinski/code/||I' \
    | fzf
  )
  # if one is selected, launch in editor
  if [[ -n $selected_project ]]; then
    cd ~/Code/"$selected_project"
    nvim
  fi
}

reset-datagrip() {
  trash ~/.var/app/com.jetbrains.DataGrip/config/JetBrains/DataGrip202*.*/.lock
}

dark-mode() {
  kitten themes --reload-in=all Catppuccin-Mocha
}

light-mode() {
  kitten themes --reload-in=all Catppuccin-Latte
}

zel() {
  local SESH=$(zellij list-sessions | sed -E 's/ \[.*$//' | fzf --ansi)

  if [[ -z "$SESH" ]]; then
    echo "No session selected." >&2
    return 1
  fi

  echo "Attaching to session: $SESH"
  zellij attach "$SESH"
}


kill_port() {
  local PORT=$1
  local PID=$(lsof -t -i :$PORT)
  if [ -z "$PID" ]; then
    echo "No process found on port $PORT"
    return 1
  fi
  kill -9 $PID
  echo "Killed process on port $PORT on pid $PID"
}

# select and set system timezone
timezone() {
    local timezones
    timezones=$(timedatectl list-timezones 2>/dev/null)
    if [ -z "$timezones" ]; then
        echo "Error: Could not retrieve timezone list."
        return 1
    fi
    local current_tz
    current_tz=$(timedatectl show --property=Timezone --value 2>/dev/null)

    local selected
    selected=$(echo "$timezones" | fzf \
        --prompt="Select timezone (current: $current_tz): " \
        --height=40% \
        --layout=reverse \
        --border \
        --preview-window=hidden \
        --query="${1:-}" \
        --select-1 \
        --exit-0)

    if [ -z "$selected" ]; then
        echo "No timezone selected. Keeping current timezone: $current_tz"
        return 0
    fi
    echo "Setting timezone to: $selected"
    if sudo timedatectl set-timezone "$selected"; then
        echo "\n✓ Timezone successfully set to: $selected"
        echo "Current time info:"
        timedatectl status | grep -E "Local time:|Time zone:|System clock"
    else
        echo "✗ Failed to set timezone. You may need sudo privileges."
        return 1
    fi
}
